/*
 * generated by Xtext
 */
package com.btc.serviceidl.generator

import com.btc.serviceidl.generator.common.ArtifactNature
import com.btc.serviceidl.generator.common.GuidMapper
import com.btc.serviceidl.generator.common.ProjectType
import com.btc.serviceidl.generator.cpp.CppGenerator
import com.btc.serviceidl.generator.dotnet.DotNetGenerator
import com.btc.serviceidl.generator.java.JavaGenerator
import com.btc.serviceidl.generator.protobuf.ProtobufGenerator
import com.btc.serviceidl.idl.AbstractContainerDeclaration
import com.btc.serviceidl.idl.EventDeclaration
import com.btc.serviceidl.idl.IDLSpecification
import com.btc.serviceidl.idl.InterfaceDeclaration
import com.google.inject.Inject
import java.util.Collections
import java.util.Map
import java.util.UUID
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGenerator2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.eclipse.xtext.scoping.IScopeProvider

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class IdlGenerator implements IGenerator2
{

    @Inject extension IQualifiedNameProvider qualifiedNameProvider
    @Inject extension IScopeProvider scopeProvider
    @Inject IGenerationSettingsProvider generationSettingsProvider

    override doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext gc)
    {
        // generate GUIDs: common among C++, Java and .NET!
        var boolean resourceChanged = false;
        for (interfaceDeclaration : resource.allContents.toIterable.filter(InterfaceDeclaration))
        {
            if (interfaceDeclaration.guid === null)
            {
                val uuid = UUID.randomUUID.toString.toUpperCase
                GuidMapper.put(interfaceDeclaration, uuid)
                interfaceDeclaration.guid = uuid
                resourceChanged = true
            }
            else
                GuidMapper.put(interfaceDeclaration, interfaceDeclaration.guid.toUpperCase)
        }
        for (event : resource.allContents.toIterable.filter(EventDeclaration))
        {
            if (event.guid === null)
            {
                val uuid = UUID.randomUUID.toString.toUpperCase
                GuidMapper.put(event, uuid)
                event.guid = uuid
                resourceChanged = true
            }
            else
                GuidMapper.put(event, event.guid.toUpperCase)
        }
        if (resourceChanged)
        {
            resource.save(Collections.EMPTY_MAP)
        }
        val idl = resource.contents.filter(IDLSpecification).head // only one IDL root module possible
        if (idl === null)
        {
            return
        }

        val generationSettings = generationSettingsProvider.getSettings(resource)
        val projectTypes = generationSettings.projectTypes
        val languages = generationSettings.languages

// TODO REFACTOR invert these dependencies
        var ProtobufGenerator protobufGenerator
        var Map<AbstractContainerDeclaration, String> protobufArtifacts
        if (projectTypes.contains(ProjectType.PROTOBUF))
        {
            protobufGenerator = new ProtobufGenerator(resource, fsa, qualifiedNameProvider,
                generationSettings.moduleStructureStrategy)
            protobufGenerator.doGenerate(languages)
            protobufArtifacts = protobufGenerator.generatedArtifacts
        }

        if (languages.contains(ArtifactNature.CPP))
        {
            val cppGenerator = new CppGenerator(idl, fsa, qualifiedNameProvider, scopeProvider, generationSettings,
                protobufGenerator?.getProjectReferences(ArtifactNature.CPP))
            cppGenerator.doGenerate
        }

        if (languages.contains(ArtifactNature.JAVA))
        {
            val javaGenerator = new JavaGenerator(idl, fsa, qualifiedNameProvider, generationSettings,
                protobufArtifacts)
            javaGenerator.doGenerate
        }

        if (languages.contains(ArtifactNature.DOTNET))
        {
            val dotnetGenerator = new DotNetGenerator(
                idl,
                fsa,
                qualifiedNameProvider,
                generationSettings,
                projectTypes,
                protobufGenerator?.getProjectReferences(ArtifactNature.DOTNET)
            )
            dotnetGenerator.doGenerate
        }
    }

    override afterGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context)
    {
    }

    override beforeGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context)
    {
    }

}
