/*********************************************************************
 * \author see AUTHORS file
 * \copyright 2015-2018 BTC Business Technology Consulting AG and others
 * 
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 * 
 * SPDX-License-Identifier: EPL-2.0
 **********************************************************************/
/*
 * generated by Xtext 2.13.0
 */
package com.btc.serviceidl.generator;

import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.GnuParser;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtext.diagnostics.Severity;
import org.eclipse.xtext.generator.GeneratorContext;
import org.eclipse.xtext.generator.GeneratorDelegate;
import org.eclipse.xtext.generator.JavaIoFileSystemAccess;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.validation.CheckMode;
import org.eclipse.xtext.validation.IResourceValidator;
import org.eclipse.xtext.validation.Issue;

import com.btc.serviceidl.IdlStandaloneSetup;
import com.btc.serviceidl.generator.common.ArtifactNature;
import com.btc.serviceidl.generator.common.ProjectType;
import com.btc.serviceidl.generator.cpp.cab.CABModuleStructureStrategy;
import com.btc.serviceidl.generator.cpp.cmake.CMakeProjectSetFactory;
import com.btc.serviceidl.generator.cpp.prins.VSSolutionFactory;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Sets;
import com.google.inject.Inject;
import com.google.inject.Injector;
import com.google.inject.Provider;

public class Main {

    public static final String OPTION_OUTPUT_PATH                            = "outputPath";
    public static final String OPTION_CPP_OUTPUT_PATH                        = "cppOutputPath";
    public static final String OPTION_JAVA_OUTPUT_PATH                       = "javaOutputPath";
    public static final String OPTION_DOTNET_OUTPUT_PATH                     = "dotnetOutputPath";
    public static final String OPTION_CPP_PROJECT_SYSTEM                     = "cppProjectSystem";
    public static final String OPTION_VALUE_CPP_PROJECT_SYSTEM_CMAKE         = "cmake";
    public static final String OPTION_VALUE_CPP_PROJECT_SYSTEM_PRINS_VCXPROJ = "prins-vcxproj";
    public static final String OPTION_VALUE_CPP_PROJECT_SYSTEM_DEFAULT       = OPTION_VALUE_CPP_PROJECT_SYSTEM_PRINS_VCXPROJ;
    public static final String OPTION_VERSIONS                               = "versions";
    public static final String OPTION_PROJECT_SET                            = "projectSet";
    public static final String OPTION_VALUE_PROJECT_SET_API                  = "api";
    public static final String OPTION_VALUE_PROJECT_SET_CLIENT               = "client";
    public static final String OPTION_VALUE_PROJECT_SET_SERVER               = "server";
    public static final String OPTION_VALUE_PROJECT_SET_FULL                 = "full";
    public static final String OPTION_VALUE_PROJECT_SET_FULL_WITH_SKELETON   = "full-with-skeleton";

    public static final Set<ProjectType> API_PROJECT_SET    = ImmutableSet.of(ProjectType.SERVICE_API,
            ProjectType.COMMON);
    public static final Set<ProjectType> CLIENT_PROJECT_SET = Sets.union(API_PROJECT_SET,
            ImmutableSet.of(ProjectType.PROTOBUF, ProjectType.PROXY, ProjectType.CLIENT_CONSOLE));
    public static final Set<ProjectType> SERVER_PROJECT_SET = Sets.union(API_PROJECT_SET,
            ImmutableSet.of(ProjectType.PROTOBUF, ProjectType.DISPATCHER, ProjectType.SERVER_RUNNER));
    public static final Set<ProjectType> FULL_PROJECT_SET   = Sets.union(CLIENT_PROJECT_SET, SERVER_PROJECT_SET);

    public static final Map<String, Set<ProjectType>> PROJECT_SET_MAPPING = ImmutableMap.of(
            OPTION_VALUE_PROJECT_SET_API, API_PROJECT_SET, OPTION_VALUE_PROJECT_SET_CLIENT, CLIENT_PROJECT_SET,
            OPTION_VALUE_PROJECT_SET_SERVER, SERVER_PROJECT_SET, OPTION_VALUE_PROJECT_SET_FULL, FULL_PROJECT_SET,
            OPTION_VALUE_PROJECT_SET_FULL_WITH_SKELETON, ImmutableSet.copyOf(ProjectType.values()));

    public static final int EXIT_CODE_GOOD              = 0;
    public static final int EXIT_CODE_GENERATION_FAILED = 1;
    public static final int EXIT_CODE_INVALID_ARGUMENTS = 1;

    public static void main(String[] args) {
        System.exit(mainBackend(args));
    }

    public static int mainBackend(String[] args) {
        assert (args != null);
        if (args.length == 0) {
            new HelpFormatter().printHelp("Generator", createOptions());
            System.err.println("Aborting: no path to EMF resource provided!");
            return EXIT_CODE_INVALID_ARGUMENTS;
        }
        Injector injector = new IdlStandaloneSetup().createInjectorAndDoEMFRegistration();
        Main main = injector.getInstance(Main.class);

        CommandLine commandLine = parseCommandLine(args);

        final boolean genericOutputPath = commandLine.hasOption(OPTION_OUTPUT_PATH);
        final boolean specificOutputPath = commandLine.hasOption(OPTION_CPP_OUTPUT_PATH)
                || commandLine.hasOption(OPTION_JAVA_OUTPUT_PATH) || commandLine.hasOption(OPTION_DOTNET_OUTPUT_PATH);

        if (genericOutputPath == specificOutputPath) {
            System.err.println("You must specify *either* a generic output path using -" + OPTION_OUTPUT_PATH
                    + ", or one or more technology-specific output paths using -" + OPTION_CPP_OUTPUT_PATH + ", -"
                    + OPTION_JAVA_OUTPUT_PATH + ", -" + OPTION_DOTNET_OUTPUT_PATH);
            return EXIT_CODE_INVALID_ARGUMENTS;
        }
        Map<ArtifactNature, IPath> outputPaths = new HashMap<ArtifactNature, IPath>();
        if (genericOutputPath) {
            IPath baseOutputPath = new Path(commandLine.getOptionValue(OPTION_OUTPUT_PATH));
            for (ArtifactNature artifactNature : ArtifactNature.values()) {
                outputPaths.put(artifactNature, baseOutputPath.append(artifactNature.getLabel()));
            }
        } else {
            if (commandLine.hasOption(OPTION_CPP_OUTPUT_PATH)) {
                outputPaths.put(ArtifactNature.CPP, new Path(commandLine.getOptionValue(OPTION_CPP_OUTPUT_PATH)));
            }
            if (commandLine.hasOption(OPTION_JAVA_OUTPUT_PATH)) {
                outputPaths.put(ArtifactNature.JAVA, new Path(commandLine.getOptionValue(OPTION_JAVA_OUTPUT_PATH)));
            }
            if (commandLine.hasOption(OPTION_DOTNET_OUTPUT_PATH)) {
                outputPaths.put(ArtifactNature.DOTNET, new Path(commandLine.getOptionValue(OPTION_DOTNET_OUTPUT_PATH)));
            }
        }

        final boolean res = main.tryRunGenerator(commandLine.getArgs(), outputPaths,
                commandLine.hasOption(OPTION_CPP_PROJECT_SYSTEM) ? commandLine.getOptionValue(OPTION_CPP_PROJECT_SYSTEM)
                        : OPTION_VALUE_CPP_PROJECT_SYSTEM_DEFAULT,
                commandLine.hasOption(OPTION_VERSIONS) ? splitVersions(commandLine.getOptionValue(OPTION_VERSIONS))
                        : new ArrayList<Map.Entry<String, String>>(),
                commandLine.hasOption(OPTION_PROJECT_SET)
                        ? PROJECT_SET_MAPPING.get(commandLine.getOptionValue(OPTION_PROJECT_SET))
                        : ImmutableSet.copyOf(ProjectType.values()));

        return res ? EXIT_CODE_GOOD : EXIT_CODE_GENERATION_FAILED;
    }

    private static Iterable<Map.Entry<String, String>> splitVersions(String optionValue) {
        Collection<Map.Entry<String, String>> res = new ArrayList<Map.Entry<String, String>>();
        for (String versionEntry : optionValue.split(",")) {
            String[] versionEntryParts = versionEntry.split("=");
            if (versionEntryParts.length != 2) {
                throw new IllegalArgumentException(
                        "Invalid version specifiction '" + versionEntry + "', use kind=version");
            }
            res.add(new AbstractMap.SimpleImmutableEntry<String, String>(versionEntryParts[0], versionEntryParts[1]));
        }
        return res;
    }

    private static Options createOptions() {
        Options options = new Options();
        options.addOption(OPTION_OUTPUT_PATH, true, "base path for generated output files (all technologies)");
        options.addOption(OPTION_CPP_OUTPUT_PATH, true, "base path for generated C++ output files");
        options.addOption(OPTION_JAVA_OUTPUT_PATH, true, "base path for generated Java output files");
        options.addOption(OPTION_DOTNET_OUTPUT_PATH, true, "base path for generated .NET output files");
        options.addOption(OPTION_CPP_PROJECT_SYSTEM, true, "C++ project system ("
                + OPTION_VALUE_CPP_PROJECT_SYSTEM_CMAKE + "," + OPTION_VALUE_CPP_PROJECT_SYSTEM_PRINS_VCXPROJ + ")");
        options.addOption(OPTION_VERSIONS, true, "target Version overrides");
        options.addOption(OPTION_PROJECT_SET, true,
                "set of projects to generate (" + String.join(",", PROJECT_SET_MAPPING.keySet()) + "), default is "
                        + OPTION_VALUE_PROJECT_SET_FULL_WITH_SKELETON);
        return options;
    }

    private static CommandLine parseCommandLine(String[] args) {
        CommandLineParser parser = new GnuParser();
        try {
            return parser.parse(createOptions(), args);
        } catch (ParseException exp) {
            System.err.println("Parsing command line failed.  Reason: " + exp.getMessage());
            System.exit(1);
            return null;
        }
    }

    @Inject
    private Provider<ResourceSet> resourceSetProvider;

    @Inject
    private IResourceValidator validator;

    @Inject
    private GeneratorDelegate generator;

    @Inject
    private JavaIoFileSystemAccess fileAccess;

    @Inject
    private IGenerationSettingsProvider generationSettingsProvider;

    private boolean tryRunGenerator(String[] inputFiles, Map<ArtifactNature, IPath> outputPaths, String projectSystem,
            Iterable<Map.Entry<String, String>> versions, Set<ProjectType> projectSet) {
        // Load the resource
        ResourceSet set = resourceSetProvider.get();
        for (String inputFile : inputFiles) {
            set.getResource(URI.createFileURI(inputFile), true);
        }

        System.out.println("Validating IDL input.");
        for (Resource resource : set.getResources()) {

            // Validate the resources
            List<Issue> list = validator.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);
            if (!list.isEmpty()) {
                boolean hasError = false;
                for (Issue issue : list) {
                    System.err.println(issue);
                    hasError |= issue.getSeverity() == Severity.ERROR;
                }
                if (hasError) {
                    System.err.println("Errors in IDL input, terminating.");
                    return false;
                }
            }
        }
        System.out.println("IDL input is valid.");

        try {
            configureGenerationSetings(projectSystem, versions);
        } catch (Exception ex) {
            System.err.println("Error when configuring generation settings: " + ex);
            return false;
        }

        // Configure and start the generator
        for (ArtifactNature artifactNature : outputPaths.keySet()) {
            final IPath outputPath = outputPaths.get(artifactNature);
            System.out
                    .println("Configuring generation of " + artifactNature.getLabel() + " artifacts to " + outputPath);
            fileAccess.setOutputPath(artifactNature.getLabel(), outputPath.toOSString());
        }

        DefaultGenerationSettingsProvider defaultGenerationSettingsProvider = (DefaultGenerationSettingsProvider) generationSettingsProvider;
        defaultGenerationSettingsProvider.languages = outputPaths.keySet();
        defaultGenerationSettingsProvider.projectTypes = projectSet;

        GeneratorContext context = new GeneratorContext();
        context.setCancelIndicator(CancelIndicator.NullImpl);

        for (Resource resource : set.getResources()) {
            generator.generate(resource, fileAccess, context);
        }

        System.out.println("Code generation finished.");
        return true;
    }

    private void configureGenerationSetings(String projectSystem, Iterable<Map.Entry<String, String>> versions) {
        DefaultGenerationSettingsProvider defaultGenerationSettingsProvider = (DefaultGenerationSettingsProvider) generationSettingsProvider;

        configureGenerationSettings(defaultGenerationSettingsProvider, projectSystem, versions);
    }

    public static void configureGenerationSettings(DefaultGenerationSettingsProvider defaultGenerationSettingsProvider,
            String projectSystem, Iterable<Map.Entry<String, String>> versions) {
        switch (projectSystem) {
        case OPTION_VALUE_CPP_PROJECT_SYSTEM_CMAKE:
            defaultGenerationSettingsProvider.projectSetFactory = new CMakeProjectSetFactory();

            // TODO instead of printing on System.out, use some event mechanism here
            System.out.println("Disabling ODB generation, this is unsupported with CMake project system");
            defaultGenerationSettingsProvider.projectTypes.remove(ProjectType.EXTERNAL_DB_IMPL);
            defaultGenerationSettingsProvider.moduleStructureStrategy = new CABModuleStructureStrategy();

            break;
        case OPTION_VALUE_CPP_PROJECT_SYSTEM_PRINS_VCXPROJ:
            defaultGenerationSettingsProvider.projectSetFactory = new VSSolutionFactory();
            break;
        default:
            throw new IllegalArgumentException("Unknown project system: " + projectSystem);
        }

        for (Entry<String, String> version : versions) {
            defaultGenerationSettingsProvider.setVersion(version.getKey(), version.getValue());
        }
    }
}
